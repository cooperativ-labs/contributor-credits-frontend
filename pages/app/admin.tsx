import { useMutation } from '@apollo/client';
import { stringLength } from '@firebase/util';
import { LoadingButtonText } from '@src/Manager/components/buttons/Button';
import FormButton from '@src/Manager/components/buttons/FormButton';
import PresentLegalText from '@src/Manager/components/PresentLegalText';
import Input from '@src/Manager/forms/components/Inputs';
import Select from '@src/Manager/forms/components/Select';
import { WalletOwnerContext } from '@src/SetAppContext';
import { ADD_DOCUMENT } from '@src/utils/dGraphQueries/agreement';
import { MatchSupportedChains } from '@src/web3/connectors';
import { Form, Formik } from 'formik';
import { ValuesOfCorrectTypeRule } from 'graphql';
import React from 'react';

const content =
  'By establishing the C2 Contract with the hash of this Agreement, the Agreement goes into effect and `Sunshine Labs` agrees to the following:  ### Definitions:  - **"`Sunshine Labs`"** means `Sunshine Labs Inc., a corporation organized under the laws of the State of Delaware, United States of America`.  - **"C2 Contract"** means the smart contract located at   ``0xB454EB8bf052efeAA949f9965C6Ee8Fb4f5034eD`` on `the Ethereum Blockchain`.  - **"Contributor Credits"** means the ERC token managed by the C2 Contract  - **"`DAI`"** means the ERC token managed by the smart contract located at   ``0x6b175474e89094c44da98b954eedeac495271d0f`` on `the Ethereum Blockchain`.  - **"Person"** means any natural person, corporation, limited liability company,   trust, joint venture, association, company, partnership, Governmental Authority   or other entity.  - **"Affiliate"** means any Person or entity now or hereafter in control, controlled   by or in common control with `Sunshine Labs`. It shall also include any direct or   indirect subsidiary of `Sunshine Labs` and any company in which `Sunshine Labs` has more than a   ten percent (10%) ownership interest.  - **"Independent Party"** means one or more a third Persons that do not collectively   constitute Affiliates of `Sunshine Labs`.  ### Terms:  The occurrence of any of the following shall constitute a “Trigger Event”:  1. the closing of one or more equity financings of the sale of shares of    `Sunshine Labs` capital stock to an investor or investors with gross proceeds to    `Sunshine Labs` of at least `2,000,000` `USD` or equivalent    (this expressly does not include the conversion of any    convertible debt of `Sunshine Labs`) (an “Equity Financing”);  2. `Sunshine Labs` reaching revenue, determined in accordance with GAAP,    equal to or exceeding `700,000` `USD` or equivalent for the twelve (12) month period    immediately preceding any date of determination (the "Trailing Revenue    Threshold"); or  3. the execution of a transaction or series of transactions (a "Sale"), with    an Independent Party, pursuant to which such Independent Party acquires    - (a) all of the outstanding Equity Securities of `Sunshine Labs`,    - (b) all or substantially all of the assets of `Sunshine Labs` and its Subsidiaries, or    - (c) Equity Securities of `Sunshine Labs` authorized and issued, and possessing the      power to elect or appoint a majority of the Board of Directors (or any similar      governing body of any surviving or resulting Person).  Upon the earliest occurrence of any Trigger Event, `Sunshine Labs` shall make a payment or payments of `DAI` to the C2 Contract such that calling the function \'isFunded\' on the C2 Contract returns \'true\'.  Exceptions:  1. In the event that the Trigger Event is the Trailing Revenue Threshold being reached, `Sunshine Labs` may delay payment until the earlier of (a) eighteen (18) months from the Trigger Event, or (b) the occurrence of another Trigger Event. 2. In the event that the Trigger event is a Sale, `Sunshine Labs` in no event shall be obligated to make a payment or payments of `DAI` in excess of the net proceeds of the Sale.  In the event that no Trigger Event occurs, `Sunshine Labs` shall have no obligation to make any payment to the C2 Contract, or provide any other compensation to holders of Contributor Credits generated by the C2 Contract.  I, `Jacob Chase-Lubitz`, certify that I have authority to sign on behalf of and legally bind `Sunshine Labs`.';

const UpdateAgreementText: React.FC = () => {
  const { uuid } = React.useContext(WalletOwnerContext);
  const [updateAgreement, { data, error }] = useMutation(ADD_DOCUMENT);

  console.log(data, error);

  return uuid === '0x531518985601FE8866fd5F39e9a3754F1fc38296' ? (
    <Formik
      initialValues={{
        agreementId: '',
        agreementText: content,
      }}
      validate={(values) => {
        const errors: any = {}; /** @TODO : Shape */
      }}
      onSubmit={async (values, { setSubmitting }) => {
        await updateAgreement({
          variables: { agreementId: values.agreementId, agreementText: content },
        });
      }}
    >
      {({ values, isSubmitting }) => (
        <Form className="flex flex-col gap relative">
          <Input name="agreementId" className={''} />
          <Input name="agreementText" className={''} />
          <FormButton type="submit" disabled={isSubmitting}>
            Add Agreement
          </FormButton>
          <PresentLegalText agreement={content} />
        </Form>
      )}
    </Formik>
  ) : (
    <></>
  );
};

export default UpdateAgreementText;
