
# Dgraph.Allow-Origin "https://contributorcredits.com" 
# Dgraph.Allow-Origin "https://www.contributorcredits.com"
# Dgraph.Allow-Origin "https://cloud.dgraph.io"
# Dgraph.Allow-Origin "http://localhost:3000"
"""
AGREEMENT MODEL 
"""
type AgreementSignatory  {
	id: ID!
	agreement: Agreement! @hasInverse(field:signatories) 
	user: User @hasInverse(field:agreements) 
	signature: String 
	signerAddress: String
	date: DateTime
}

type Agreement  {
	id: ID! 
	signatories: [AgreementSignatory] 
	organizationName: String
	contributorCreditClass: ContributorCreditClass @hasInverse(field:agreement) 
	agreementThreadID: String 
	title: String! 
	text: String 
	creationDate: DateTime!
	lastUpdate: DateTime 
	payments: [Payment] @hasInverse(field:agreement) 
	type: AgreementType
}

enum AgreementType {
		PROJECT_RELATIONSHIP
		CONTRIBUTOR_CREDIT
}

type Payment  {
	id: ID! 
	amount: Int64! 
	currency: Currency! 
	date: DateTime!
	note: String
	recipient: String! @search
	agreement: Agreement @hasInverse(field:payments)
}

type Currency  {
	code: CurrencyCode! 
	contributorCreditClass: ContributorCreditClass 
}

"""
CONTRIBUTOR CREDIT MODEL 
"""

enum ContributorCreditClassTriggerType {
	FUNDING_RAISED
	REVENUE_EARNED
	SALE
}

type ContributorCreditClassTrigger  {
	name: String 
	type: ContributorCreditClassTriggerType! 
	amount: Int64 
	currency: String 
	primary: Boolean 
}

type ContributorCreditClass {
	id: ID! 
	name: String! 
	cryptoAddress: CryptoAddress!
	type: SmartContractType!
	agreement: Agreement! @hasInverse(field:contributorCreditClass) 
	description: String 
	triggerShortDescription: String
	triggers: [ContributorCreditClassTrigger] 
	backingCurrency: CurrencyCode 
	currentFunding: Float

}

type SmartContractUnestablished {
	id: ID!
	cryptoAddress: CryptoAddress!
	type: SmartContractType!
	owner: User @hasInverse(field:unestablishedSmartContracts)
	used: Boolean
}

enum SmartContractType {
	C2
	C3
}

enum CryptoAddressProtocol {
	ETH
	BTC
	ADA
}

enum CryptoAddressType {
	WALLET
	CONTRACT
}

type CryptoAddress  {
	id: ID!
	name: String 
	address: String! @id
	description: String
	protocol: CryptoAddressProtocol 
	chainId: Int
	type: CryptoAddressType 
	public: Boolean @search
	user: User @hasInverse(field:walletAddresses) 
}


"""
ORGANIZATION MODEL 
"""
type Organization  {
	id: ID! 
	displayName: String @search(by:[fulltext]) 
	logo: String 
	website: String 
	fullLegalName: String! @search(by:[fulltext]) 
	address: String 
	country: String 
	jurisdiction: String 
	type: String 
	users: [OrganizationUser] @hasInverse(field:organization) 
}

type GeoAddress {
	id: ID!
	line1: String!
	line2: String
	line3: String
	city: String!
	stateProvence: String
	postalCode: String
	country: String
}

enum OrganizationPermissionType {
	ADMIN
}

type OrganizationUser  {
	organization: Organization! @hasInverse(field:users)
	user: User! @hasInverse(field:organizations) 
	permission: OrganizationPermissionType 
}


"""
USER MODEL 
"""

type EmailAddress {
	address: String! @id
	name: String
	description: String
	public: Boolean @search
	user: User @hasInverse(field:emailAddresses)
}

type User  {
	id: ID! 
	emailAddresses: [EmailAddress!] @hasInverse(field:user)
	displayName: String
	fullName: String
	profileImage: String 
	biography: String 
	expertise: [String] 
	interests: [String] 
	public: Boolean @search
	walletAddresses: [CryptoAddress] 
	organizations: [OrganizationUser]
	unestablishedSmartContracts: [SmartContractUnestablished] @hasInverse(field:owner)
	agreements: [AgreementSignatory] @hasInverse(field:user)
	creationDate: DateTime
}

"""
BIG LISTS
"""

enum CurrencyCode {
	CC
	USD
	CAD
	EUR
	GBP
	BTC
	ETH
	ADA
	MATIC
	USDC
	DAI
	USDC_TEST_
	DAI_TEST_
	PoS_USDC
	PoS_DAI
	USDC_MATIC_TEST_
	DAI_MATIC_TEST_
}

